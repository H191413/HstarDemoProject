import { saveAs } from "file-saver";

function buildFFmpeegAsmWorker(workerPath: string) {
  const blob = URL.createObjectURL(
    new Blob(
      [
        'importScripts("' +
          workerPath +
          '");var now = Date.now;function print(text) {postMessage({"type" : "stdout","data" : text});};onmessage = function(event) {var message = event.data;if (message.type === "command") {var Module = {print: print,printErr: print,files: message.files || [],arguments: message.arguments || [],TOTAL_MEMORY: message.TOTAL_MEMORY || false};postMessage({"type" : "start","data" : Module.arguments.join(" ")});postMessage({"type" : "stdout","data" : "Received command: " +Module.arguments.join(" ") +((Module.TOTAL_MEMORY) ? ".  Processing with " + Module.TOTAL_MEMORY + " bits." : "")});var time = now();var result = ffmpeg_run(Module);var totalTime = now() - time;postMessage({"type" : "stdout","data" : "Finished processing (took " + totalTime + "ms)"});postMessage({"type" : "done","data" : result,"time" : totalTime});}};postMessage({"type" : "ready"});'
      ],
      {
        type: "application/javascript"
      }
    )
  );

  const worker = new Worker(blob);
  URL.revokeObjectURL(blob);
  return worker;
}

function readBlob(webmBlob) {
  const fileReader = new FileReader();
  return new Promise((resolve, reject) => {
    fileReader.onload = function() {
      resolve(this.result);
    };
    fileReader.onerror = function(err) {
      reject(err);
    };
    fileReader.readAsArrayBuffer(webmBlob);
  });
}

function executeConvertCommand(worker: any, data: any) {
  worker.postMessage({
    type: "command",
    arguments: "-i video.webm -c:v mpeg4 -b:v 6400k -strict experimental output.mp4".split(
      " "
    ),
    files: [
      {
        data: new Uint8Array(data),
        name: "video.webm"
      }
    ]
  });
}

export async function convertWebm2MP4(webmBlob) {
  const workerPath = "http://192.168.0.104:8000/static/ffmpeg_asm.js";
  const worker = buildFFmpeegAsmWorker(workerPath);
  let dataRendy = false;
  let workRendy = false;
  let videoData;
  readBlob(webmBlob).then(data => {
    dataRendy = true;
    videoData = data;
    if (workRendy && dataRendy) {
      executeConvertCommand(worker, videoData);
    }
  });
  worker.onmessage = function(event) {
    var message = event.data;
    console.log("type", message.type);
    if (message.type == "ready") {
      workRendy = true;
      if (workRendy && dataRendy) {
        executeConvertCommand(worker, videoData);
      }
    } else if (message.type == "done") {
      var result = message.data[0];
      var blob = new File([result.data], "test.mp4", {
        type: "video/mp4"
      });
      saveAs(blob, "test.mp4");
    }
  };
}
